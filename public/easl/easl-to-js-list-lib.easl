; (list expr*)
(alist-add forms "list" (λ (expr)
    (~ "["
       (if (= (list-length expr) 1)
           ""
           (list-join << parse-code-lines << list-slice expr 1))
       "]")))

; (list-make size fill=0)
(alist-add forms "list-make" (λ (expr)
    (const (size (fill 0)) (parse-args expr))
    (~ "[ ...Array(" size ").keys() ].map( () => " fill " )")))

; (list-range size (from 0))
(alist-add forms "list-range" (λ (expr)
    (const (size (from 0)) (parse-args expr))
    (~ "[ ...Array(" size ").keys() ].map(e => " (if (= from 0) "e" (~ "e + " from)) ")")))

; (list-push lst value)
(alist-add forms "list-push" (λ (expr)
    (const (lst value) (parse-args expr))
    (~ lst ".push(" value ");\n")))

; (list-get lst index)
(alist-add forms "list-get" (λ (expr)
    (const (lst index) (parse-args expr))
    (~ lst "[" index "]")))

; (list-set lst index value)
(alist-add forms "list-set" (λ (expr)
    (const (lst index value) (parse-args expr))
    (~ lst "[" index "] = " value ";\n")))

; (list-length lst)
(alist-add forms "list-length" (λ (expr)
    (const (lst) (parse-args expr))
    (~ lst ".length")))

; (list-join lst delimiter)
(alist-add forms "list-join" (λ (expr)
    (const (lst (delimiter "\", \"")) (parse-args expr))
    (~ lst ".join(" delimiter ")\n")))
