;; List - Higher Order Functions

(let list-reduce (lst fn val)
    (const len (list-length lst))

    (let i 0)
    (let res val)
    (while (< i len)
        (set res (fn (list-get lst i) res i))
        (inc i))

    res)

(const list-map (lst fn)
    (const len (list-length lst))
    (const res (list))

    (let i 0)
    (while (< i len)
        (list-push res (fn (list-get lst i) i))
        (inc i))

    res)

(let list-for-each (lst fn)
    (const len (list-length lst))

    (let i 0)
    (while (< i len)
        (fn (list-get lst i) i)
        (inc i)))

(let list-filter (lst fn)
    (const len (list-length lst))
    (const res (list))

    (let i 0)
    (while (< i len)
        (let e (list-get lst i))
        (when (fn e i)
              (list-push res e))
        (inc i))

    res)

(let list-any (lst fn)
    (const len (list-length lst))

    (let i 0)
    (let is-any false)
    (while (< i len)
        (when (fn (list-get lst i) i)
              (set is-any true)
              (break))
        (inc i))

    is-any)

(let list-all (lst fn)
    (const len (list-length lst))

    (let i 0)
    (let is-all true)
    (while (< i len)
        (unless (fn (list-get lst i) i)
            (set is-all false)
            (break))
        (inc i))

    is-all)
