; (and a b)
(alist-add forms "and" (λ (expr)
    (case (list-length expr)
        ((1) "true")
        ((2) (parse-code (list-get expr 1)))
        ((3) (const (a b) (parse-args expr))
             (~ "(" a " && " b ")")))))


; (apply proc args)
(alist-add forms "apply" (λ (expr)
    (const (proc args) (parse-args expr))

    (~ proc ".apply(null, " args ")")))


; (or a b)
(alist-add forms "or" (λ (expr)
    (case (list-length expr)
        ((1) "false")
        ((2) (parse-code (list-get expr 1)))
        ((3) (const (a b) (parse-args expr))
             (~ "(" a " || " b ")")))))


; (block expr expr*)
(alist-add forms "block" (λ (expr)
    (const block-body (parse-code-list (list-slice expr 1)))

    (~ "(() => {\n"
           (pad-left block-body "    ")
       "})()")))


; (break)
(alist-add forms "break" (λ (expr)
    "break;\n"))


; (continue)
(alist-add forms "continue" (λ (expr)
    "continue;\n"))


; (if test-expr then-expr else-expr?)
(alist-add forms "if" (λ (expr)
    (if (= (list-length expr) 3)
        (block
            (const (test-expr then-expr) (parse-args expr))
            (~ "if (" test-expr ") {\n"
                   (pad-left then-expr "    ")
               "}\n"))
        (block
            (const (test-expr then-expr else-expr) (parse-args expr))
            (~ "(" test-expr " ? " then-expr " : " else-expr ")")))))


; (lambda (par*) expr+)
(alist-add forms "lambda" (λ (expr)
    (const params (parse-list-destructuring (list-get expr 1)))

    (if (= (list-length expr) 3)
        (~ params " => " (parse-code (list-get expr 2)))
        (block
            (const lambda-body (parse-code-block (list-slice expr 2)))
            (~ params " => {\n"
                   (pad-left lambda-body "    ") "\n"
               "}\n")))))


; (let symbol expr)    ; variable definition
; (let (par+) (expr+)) ; list destructuring
; (let symbol (par*)   ; procedure definition
;     expr+)
(alist-add forms "let" (λ (expr)
    (parse-let-const expr "let")))


; (const symbol expr)    ; variable definition
; (const (par+) (expr+)) ; list destructuring
; (const symbol (par*)   ; procedure definition
;     expr+)
(alist-add forms "const" (λ (expr)
    (parse-let-const expr "const")))


(const parse-let-const (expr modifier)
    (cond
        ((and (= (list-length expr) 3)
              (equal (type-of (list-get expr 1)) "list"))
            ; list destructuring
            (const params (parse-list-destructuring (list-get expr 1)))
            (const values (parse-code (list-get expr 2)))
            (~ modifier params " = " values ";\n"))
        ((= (list-length expr) 3)
            ; variable definition
            (const symbol (list-get expr 1))
            (const value  (parse-code (list-get expr 2)))
            (~ modifier " " symbol " = " value ";\n"))
        (else
            ; procedure definition
            (const symbol (list-get expr 1))
            (const params (parse-list-destructuring (list-get expr 2)))
            (const proc-body (parse-code-block (list-slice expr 3)))
            (~ "function " symbol params " {\n"
                   (pad-left proc-body "    ") "\n"
               "}\n"))))


; (set symbol expr)
(alist-add forms "set" (λ (expr)
    (const (symbol value) (parse-args expr))
    (~ symbol " = " value ";\n")))


(alist-add forms "inc" (λ (expr)
    (~ "++" (list-get expr 1))))


(alist-add forms "dec" (λ (expr)
    (~ "--" (list-get expr 1))))

; (case key
;    ((datum datum*) expr)
;    ...
;    (else     expr))
(alist-add forms "case" (λ (expr)
    (const key (parse-code (list-get expr 1)))
    (const outputs (collect
        (yield "(() => {")
        (yield (~ "    switch (" key ") {"))
        (for clause (list-slice expr 2)
            (const match (list-get clause 0))
            (if (equal (type-of match) "list")
                (block
                    (for datum match
                        (yield (~ "        case " datum ":")))
                    (yield "        {")
                    (yield (pad-left (parse-code-block (list-slice clause 1))
                                     "            "))
                    (yield "        }"))
                (block
                    (yield "        default: {")
                    (yield (pad-left (parse-code-block (list-slice clause 1))
                                     "            "))
                    (yield "        }"))))
        (yield "    }")
        (yield "})()")))

    (list-join outputs "\n")))


; (cond
;    (test-expr expr+)
;    ...
;    (else     expr))
(alist-add forms "cond" (λ (expr)
    (const outputs
        (collect
            (yield "(() => {")

            (const loop (index)
                (when (< index (list-length expr))
                    (const clause (list-get expr index))
                    (cond
                        ((= index 1) (yield-if clause))
                        ((equal (list-get clause 0) "else") (yield-else clause))
                        (else (yield-else-if clause)))
                    (loop (+ index 1))))

            (const yield-if (clause)
                (yield (~ "    if (" (parse-code (list-get clause 0)) ") {"))
                (yield (pad-left (parse-code-block (list-slice clause 1)) "        "))
                (yield "    }"))

            (const yield-else-if (clause)
                (yield (~ "    else if (" (parse-code (list-get clause 0)) ") {"))
                (yield (pad-left (parse-code-block (list-slice clause 1)) "        "))
                (yield "    }"))

            (const yield-else (clause)
                (yield "    else {")
                (yield (pad-left (parse-code-block (list-slice clause 1)) "        "))
                (yield "    }"))

            (loop 1)
            (yield "})()")))
    (list-join outputs "\n")))


; (when test-expr
;     expr+)
(alist-add forms "when" (λ (expr)
    (const test-expr (parse-code (list-get expr 1)))
    (const when-body (list-join (list-map (parse-code-lines (list-slice expr 2))
                                          (λ (line) (~ line ";\n")))
                                ""))
    (~ "if (" test-expr ") {\n"
           (pad-left when-body "    ")
       "}\n")))


; (while test-expr
;     expr+)
(alist-add forms "while" (λ (expr)
    (const test-expr  (parse-code (list-get expr 1)))
    (const while-body (parse-code-list (list-slice expr 2)))
    (~ "while (" test-expr ") {\n"
           (pad-left while-body "    ") "\n"
       "}\n")))


; (do expr+
;     test-expr)
(alist-add forms "do" (λ (expr)
    (const last-index (- (list-length expr) 1))
    (const do-body    (parse-code-list (list-slice expr 1 last-index)))
    (const test-expr  (parse-code (list-get expr last-index)))
    (~ "do {\n"
           (pad-left do-body "    ") "\n"
       "} while (" test-expr ");\n")))


; (unless test-expr
;     expr+)
(alist-add forms "unless" (λ (expr)
    (const test-expr   (parse-code (list-get   expr 1)))
    (const unless-body (parse-code-list (list-slice expr 2)))
    (~ "if (!" test-expr ") {\n"
           (pad-left unless-body "    ") "\n"
       "}\n")))


; (for symbol range
;     expr+)
(alist-add forms "for" (λ (expr)
    (const symbol   (parse-code (list-get   expr 1)))
    (const range    (parse-code (list-get   expr 2)))
    (const for-body (parse-code-list (list-slice expr 3)))
    (~ "for (const " symbol " of " range ") {\n"
           (pad-left for-body "    ") "\n"
       "}\n")))


; (repeat count
;     expr+)
(alist-add forms "repeat" (λ (expr)
    (const count (parse-code (list-get expr 1)))
    (const repeat-body (parse-code-list (list-slice expr 2)))
    (~ "for (let __i = 0; __i < " count "; __i++) {\n"
           (pad-left repeat-body "    ") "\n"
       "}\n")))


; (collect
;     expr+)
(alist-add forms "collect" (λ (expr)
    (const collect-body (parse-code-list (list-slice expr 1)))
    (~ "(() => {\n"
       (pad-left (~ "const __collect = [];\n"
                    collect-body
                    "return __collect;")
                 "    ")
       "\n})()")))


; (yield expr)
(alist-add forms "yield" (λ (expr)
    (const (yield-value) (parse-args expr))
    (~ "__collect.push(" yield-value ");")))


; (print expr1 expr2 ...)
(alist-add forms "print" (λ (expr)
    (const text (case (list-length expr)
        ((1)  "")
        ((2)  (parse-code (list-get expr 1)))
        (else (list-join (parse-code-lines (list-slice expr 1)) ", "))))
    (~ "console.log(" text ");\n")))


; (display expr)
(alist-add forms "display" (λ (expr)
    (const (text) (parse-args expr))
    (~ "console.log(" text ");\n")))


; (newline)
(alist-add forms "newline" (λ (expr)
    "console.log();\n"))


; (string expr)
(alist-add forms "string" (λ (expr)
    (const (text) (parse-args expr))
    (~ "\"" text "\"")))
