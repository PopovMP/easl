(const forms (list))

(const parse-code-block (code-lines)
    (const js-lines (collect
                        (for line code-lines
                            (yield (parse-code line)))))

    (const last-index (- (list-length js-lines) 1))
    (unless (and (equal (type-of (list-get js-lines last-index)) "string")
                 (string-ends-with (list-get js-lines last-index) "\n"))
        (list-set js-lines
                  last-index
                  (~ "return " (list-get js-lines last-index) ";")))

    (list-join js-lines ";\n"))

(const parse-code-lines (code-lines)
    (collect
        (for line code-lines
            (yield (parse-code line)))))

(const parse-code-list (source-code)
    (const loop (index javascript)
        (if (= index << list-length source-code)
            javascript
            (loop (+ index 1)
                  (~ javascript << parse-code << list-get source-code index))))

    (if (equal (type-of source-code) "list")
        (loop 0 "")
        (parse-code source-code)))

(const parse-code (expr)
    (case expr
        ((null true false) expr)
        (else
            (case (type-of expr)
                ((number string) expr)
                (else
                    (const form (list-get expr 0))
                    (if (equal (type-of form) "string")
                        (if (alist-has forms form)
                            ((alist-get forms form) expr)
                            (application expr))
                        (parse-code-list expr)))))))

(const parse-args (expr)
    (collect
        (for arg (list-slice expr 1)
            (yield << parse-code arg))))

(const pad-left (text pad)
    (list-join (collect
                   (for line (string-split text "\n")
                       (yield (if (equal line "")
                                  ""
                                  (~ pad line)))))
               "\n"))

(const parse-list-destructuring (params)
    (~ "("
      (list-join
          (collect
              (for par params
                  (if (equal (type-of par) "string")
                      (yield par)
                      (yield (~ (list-get par 0) " = " (list-get par 1))))))
          ", ")
      ")"))


(const application (expr)
    (const name   (list-get expr 0))
    (const params (list-join (parse-code-lines (list-slice expr 1)) ", "))
    (~ name "(" params ")"))
